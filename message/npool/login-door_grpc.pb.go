// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginDoorClient is the client API for LoginDoor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginDoorClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type loginDoorClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginDoorClient(cc grpc.ClientConnInterface) LoginDoorClient {
	return &loginDoorClient{cc}
}

func (c *loginDoorClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/login.door.v1.LoginDoor/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginDoorServer is the server API for LoginDoor service.
// All implementations must embed UnimplementedLoginDoorServer
// for forward compatibility
type LoginDoorServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	mustEmbedUnimplementedLoginDoorServer()
}

// UnimplementedLoginDoorServer must be embedded to have forward compatible implementations.
type UnimplementedLoginDoorServer struct {
}

func (UnimplementedLoginDoorServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedLoginDoorServer) mustEmbedUnimplementedLoginDoorServer() {}

// UnsafeLoginDoorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginDoorServer will
// result in compilation errors.
type UnsafeLoginDoorServer interface {
	mustEmbedUnimplementedLoginDoorServer()
}

func RegisterLoginDoorServer(s grpc.ServiceRegistrar, srv LoginDoorServer) {
	s.RegisterService(&LoginDoor_ServiceDesc, srv)
}

func _LoginDoor_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginDoorServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.door.v1.LoginDoor/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginDoorServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginDoor_ServiceDesc is the grpc.ServiceDesc for LoginDoor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginDoor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "login.door.v1.LoginDoor",
	HandlerType: (*LoginDoorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _LoginDoor_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/login-door.proto",
}
