// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/login-door/pkg/db/ent/loginrecord"
	"github.com/google/uuid"
)

// LoginRecord is the model entity for the LoginRecord schema.
type LoginRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// LoginTime holds the value of the "login_time" field.
	LoginTime uint32 `json:"login_time,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// Lon holds the value of the "lon" field.
	Lon float64 `json:"lon,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginrecord.FieldLat, loginrecord.FieldLon:
			values[i] = new(sql.NullFloat64)
		case loginrecord.FieldLoginTime:
			values[i] = new(sql.NullInt64)
		case loginrecord.FieldIP, loginrecord.FieldLocation, loginrecord.FieldTimezone:
			values[i] = new(sql.NullString)
		case loginrecord.FieldID, loginrecord.FieldUserID, loginrecord.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LoginRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginRecord fields.
func (lr *LoginRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginrecord.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lr.ID = *value
			}
		case loginrecord.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				lr.UserID = *value
			}
		case loginrecord.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				lr.AppID = *value
			}
		case loginrecord.FieldLoginTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				lr.LoginTime = uint32(value.Int64)
			}
		case loginrecord.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				lr.IP = value.String
			}
		case loginrecord.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				lr.Location = value.String
			}
		case loginrecord.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				lr.Lat = value.Float64
			}
		case loginrecord.FieldLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lon", values[i])
			} else if value.Valid {
				lr.Lon = value.Float64
			}
		case loginrecord.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				lr.Timezone = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LoginRecord.
// Note that you need to call LoginRecord.Unwrap() before calling this method if this LoginRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LoginRecord) Update() *LoginRecordUpdateOne {
	return (&LoginRecordClient{config: lr.config}).UpdateOne(lr)
}

// Unwrap unwraps the LoginRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LoginRecord) Unwrap() *LoginRecord {
	tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginRecord is not a transactional entity")
	}
	lr.config.driver = tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LoginRecord) String() string {
	var builder strings.Builder
	builder.WriteString("LoginRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", lr.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.UserID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.AppID))
	builder.WriteString(", login_time=")
	builder.WriteString(fmt.Sprintf("%v", lr.LoginTime))
	builder.WriteString(", ip=")
	builder.WriteString(lr.IP)
	builder.WriteString(", location=")
	builder.WriteString(lr.Location)
	builder.WriteString(", lat=")
	builder.WriteString(fmt.Sprintf("%v", lr.Lat))
	builder.WriteString(", lon=")
	builder.WriteString(fmt.Sprintf("%v", lr.Lon))
	builder.WriteString(", timezone=")
	builder.WriteString(lr.Timezone)
	builder.WriteByte(')')
	return builder.String()
}

// LoginRecords is a parsable slice of LoginRecord.
type LoginRecords []*LoginRecord

func (lr LoginRecords) config(cfg config) {
	for _i := range lr {
		lr[_i].config = cfg
	}
}
