// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/login-door/pkg/db/ent/loginrecord"
	"github.com/google/uuid"
)

// LoginRecordCreate is the builder for creating a LoginRecord entity.
type LoginRecordCreate struct {
	config
	mutation *LoginRecordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (lrc *LoginRecordCreate) SetUserID(u uuid.UUID) *LoginRecordCreate {
	lrc.mutation.SetUserID(u)
	return lrc
}

// SetAppID sets the "app_id" field.
func (lrc *LoginRecordCreate) SetAppID(u uuid.UUID) *LoginRecordCreate {
	lrc.mutation.SetAppID(u)
	return lrc
}

// SetLoginTime sets the "login_time" field.
func (lrc *LoginRecordCreate) SetLoginTime(u uint32) *LoginRecordCreate {
	lrc.mutation.SetLoginTime(u)
	return lrc
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableLoginTime(u *uint32) *LoginRecordCreate {
	if u != nil {
		lrc.SetLoginTime(*u)
	}
	return lrc
}

// SetIP sets the "ip" field.
func (lrc *LoginRecordCreate) SetIP(s string) *LoginRecordCreate {
	lrc.mutation.SetIP(s)
	return lrc
}

// SetLocation sets the "location" field.
func (lrc *LoginRecordCreate) SetLocation(s string) *LoginRecordCreate {
	lrc.mutation.SetLocation(s)
	return lrc
}

// SetLat sets the "lat" field.
func (lrc *LoginRecordCreate) SetLat(f float64) *LoginRecordCreate {
	lrc.mutation.SetLat(f)
	return lrc
}

// SetLon sets the "lon" field.
func (lrc *LoginRecordCreate) SetLon(f float64) *LoginRecordCreate {
	lrc.mutation.SetLon(f)
	return lrc
}

// SetTimezone sets the "timezone" field.
func (lrc *LoginRecordCreate) SetTimezone(s string) *LoginRecordCreate {
	lrc.mutation.SetTimezone(s)
	return lrc
}

// SetID sets the "id" field.
func (lrc *LoginRecordCreate) SetID(u uuid.UUID) *LoginRecordCreate {
	lrc.mutation.SetID(u)
	return lrc
}

// Mutation returns the LoginRecordMutation object of the builder.
func (lrc *LoginRecordCreate) Mutation() *LoginRecordMutation {
	return lrc.mutation
}

// Save creates the LoginRecord in the database.
func (lrc *LoginRecordCreate) Save(ctx context.Context) (*LoginRecord, error) {
	var (
		err  error
		node *LoginRecord
	)
	lrc.defaults()
	if len(lrc.hooks) == 0 {
		if err = lrc.check(); err != nil {
			return nil, err
		}
		node, err = lrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lrc.check(); err != nil {
				return nil, err
			}
			lrc.mutation = mutation
			if node, err = lrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lrc.hooks) - 1; i >= 0; i-- {
			if lrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LoginRecordCreate) SaveX(ctx context.Context) *LoginRecord {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LoginRecordCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LoginRecordCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LoginRecordCreate) defaults() {
	if _, ok := lrc.mutation.LoginTime(); !ok {
		v := loginrecord.DefaultLoginTime()
		lrc.mutation.SetLoginTime(v)
	}
	if _, ok := lrc.mutation.ID(); !ok {
		v := loginrecord.DefaultID()
		lrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LoginRecordCreate) check() error {
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := lrc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := lrc.mutation.LoginTime(); !ok {
		return &ValidationError{Name: "login_time", err: errors.New(`ent: missing required field "login_time"`)}
	}
	if _, ok := lrc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if _, ok := lrc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "location"`)}
	}
	if _, ok := lrc.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New(`ent: missing required field "lat"`)}
	}
	if _, ok := lrc.mutation.Lon(); !ok {
		return &ValidationError{Name: "lon", err: errors.New(`ent: missing required field "lon"`)}
	}
	if _, ok := lrc.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "timezone"`)}
	}
	return nil
}

func (lrc *LoginRecordCreate) sqlSave(ctx context.Context) (*LoginRecord, error) {
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (lrc *LoginRecordCreate) createSpec() (*LoginRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginRecord{config: lrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: loginrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: loginrecord.FieldID,
			},
		}
	)
	if id, ok := lrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lrc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginrecord.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := lrc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginrecord.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := lrc.mutation.LoginTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginrecord.FieldLoginTime,
		})
		_node.LoginTime = value
	}
	if value, ok := lrc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginrecord.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := lrc.mutation.Location(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginrecord.FieldLocation,
		})
		_node.Location = value
	}
	if value, ok := lrc.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: loginrecord.FieldLat,
		})
		_node.Lat = value
	}
	if value, ok := lrc.mutation.Lon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: loginrecord.FieldLon,
		})
		_node.Lon = value
	}
	if value, ok := lrc.mutation.Timezone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginrecord.FieldTimezone,
		})
		_node.Timezone = value
	}
	return _node, _spec
}

// LoginRecordCreateBulk is the builder for creating many LoginRecord entities in bulk.
type LoginRecordCreateBulk struct {
	config
	builders []*LoginRecordCreate
}

// Save creates the LoginRecord entities in the database.
func (lrcb *LoginRecordCreateBulk) Save(ctx context.Context) ([]*LoginRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LoginRecord, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LoginRecordCreateBulk) SaveX(ctx context.Context) []*LoginRecord {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LoginRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LoginRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
