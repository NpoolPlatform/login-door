// Code generated by entc, DO NOT EDIT.

package provider

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/login-door/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProviderName applies equality check predicate on the "provider_name" field. It's identical to ProviderNameEQ.
func ProviderName(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderName), v))
	})
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientSecret), v))
	})
}

// ProviderURL applies equality check predicate on the "provider_url" field. It's identical to ProviderURLEQ.
func ProviderURL(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderURL), v))
	})
}

// ProviderLogo applies equality check predicate on the "provider_logo" field. It's identical to ProviderLogoEQ.
func ProviderLogo(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderLogo), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// ProviderNameEQ applies the EQ predicate on the "provider_name" field.
func ProviderNameEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderName), v))
	})
}

// ProviderNameNEQ applies the NEQ predicate on the "provider_name" field.
func ProviderNameNEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProviderName), v))
	})
}

// ProviderNameIn applies the In predicate on the "provider_name" field.
func ProviderNameIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProviderName), v...))
	})
}

// ProviderNameNotIn applies the NotIn predicate on the "provider_name" field.
func ProviderNameNotIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProviderName), v...))
	})
}

// ProviderNameGT applies the GT predicate on the "provider_name" field.
func ProviderNameGT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProviderName), v))
	})
}

// ProviderNameGTE applies the GTE predicate on the "provider_name" field.
func ProviderNameGTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProviderName), v))
	})
}

// ProviderNameLT applies the LT predicate on the "provider_name" field.
func ProviderNameLT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProviderName), v))
	})
}

// ProviderNameLTE applies the LTE predicate on the "provider_name" field.
func ProviderNameLTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProviderName), v))
	})
}

// ProviderNameContains applies the Contains predicate on the "provider_name" field.
func ProviderNameContains(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProviderName), v))
	})
}

// ProviderNameHasPrefix applies the HasPrefix predicate on the "provider_name" field.
func ProviderNameHasPrefix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProviderName), v))
	})
}

// ProviderNameHasSuffix applies the HasSuffix predicate on the "provider_name" field.
func ProviderNameHasSuffix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProviderName), v))
	})
}

// ProviderNameEqualFold applies the EqualFold predicate on the "provider_name" field.
func ProviderNameEqualFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProviderName), v))
	})
}

// ProviderNameContainsFold applies the ContainsFold predicate on the "provider_name" field.
func ProviderNameContainsFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProviderName), v))
	})
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientID), v))
	})
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientID), v...))
	})
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientID), v...))
	})
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientID), v))
	})
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientID), v))
	})
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientID), v))
	})
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientID), v))
	})
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientID), v))
	})
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientID), v))
	})
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientID), v))
	})
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientID), v))
	})
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientID), v))
	})
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientSecret), v))
	})
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientSecret), v))
	})
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientSecret), v...))
	})
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientSecret), v...))
	})
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientSecret), v))
	})
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientSecret), v))
	})
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientSecret), v))
	})
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientSecret), v))
	})
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientSecret), v))
	})
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientSecret), v))
	})
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientSecret), v))
	})
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientSecret), v))
	})
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientSecret), v))
	})
}

// ProviderURLEQ applies the EQ predicate on the "provider_url" field.
func ProviderURLEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderURL), v))
	})
}

// ProviderURLNEQ applies the NEQ predicate on the "provider_url" field.
func ProviderURLNEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProviderURL), v))
	})
}

// ProviderURLIn applies the In predicate on the "provider_url" field.
func ProviderURLIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProviderURL), v...))
	})
}

// ProviderURLNotIn applies the NotIn predicate on the "provider_url" field.
func ProviderURLNotIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProviderURL), v...))
	})
}

// ProviderURLGT applies the GT predicate on the "provider_url" field.
func ProviderURLGT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProviderURL), v))
	})
}

// ProviderURLGTE applies the GTE predicate on the "provider_url" field.
func ProviderURLGTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProviderURL), v))
	})
}

// ProviderURLLT applies the LT predicate on the "provider_url" field.
func ProviderURLLT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProviderURL), v))
	})
}

// ProviderURLLTE applies the LTE predicate on the "provider_url" field.
func ProviderURLLTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProviderURL), v))
	})
}

// ProviderURLContains applies the Contains predicate on the "provider_url" field.
func ProviderURLContains(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProviderURL), v))
	})
}

// ProviderURLHasPrefix applies the HasPrefix predicate on the "provider_url" field.
func ProviderURLHasPrefix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProviderURL), v))
	})
}

// ProviderURLHasSuffix applies the HasSuffix predicate on the "provider_url" field.
func ProviderURLHasSuffix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProviderURL), v))
	})
}

// ProviderURLEqualFold applies the EqualFold predicate on the "provider_url" field.
func ProviderURLEqualFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProviderURL), v))
	})
}

// ProviderURLContainsFold applies the ContainsFold predicate on the "provider_url" field.
func ProviderURLContainsFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProviderURL), v))
	})
}

// ProviderLogoEQ applies the EQ predicate on the "provider_logo" field.
func ProviderLogoEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoNEQ applies the NEQ predicate on the "provider_logo" field.
func ProviderLogoNEQ(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoIn applies the In predicate on the "provider_logo" field.
func ProviderLogoIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProviderLogo), v...))
	})
}

// ProviderLogoNotIn applies the NotIn predicate on the "provider_logo" field.
func ProviderLogoNotIn(vs ...string) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProviderLogo), v...))
	})
}

// ProviderLogoGT applies the GT predicate on the "provider_logo" field.
func ProviderLogoGT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoGTE applies the GTE predicate on the "provider_logo" field.
func ProviderLogoGTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoLT applies the LT predicate on the "provider_logo" field.
func ProviderLogoLT(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoLTE applies the LTE predicate on the "provider_logo" field.
func ProviderLogoLTE(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoContains applies the Contains predicate on the "provider_logo" field.
func ProviderLogoContains(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoHasPrefix applies the HasPrefix predicate on the "provider_logo" field.
func ProviderLogoHasPrefix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoHasSuffix applies the HasSuffix predicate on the "provider_logo" field.
func ProviderLogoHasSuffix(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoEqualFold applies the EqualFold predicate on the "provider_logo" field.
func ProviderLogoEqualFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProviderLogo), v))
	})
}

// ProviderLogoContainsFold applies the ContainsFold predicate on the "provider_logo" field.
func ProviderLogoContainsFold(v string) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProviderLogo), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.Provider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Provider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Provider) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Provider) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Provider) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		p(s.Not())
	})
}
